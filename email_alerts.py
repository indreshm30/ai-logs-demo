# üìß Email Alert System

import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os
import json
from datetime import datetime
import requests

class EmailAlertSystem:
    """Enhanced email alerting with templates and multiple providers"""
    
    def __init__(self, smtp_config=None):
        # Default Gmail configuration
        self.smtp_config = smtp_config or {
            'smtp_server': 'smtp.gmail.com',
            'port': 587,
            'username': os.getenv('EMAIL_USERNAME'),
            'password': os.getenv('EMAIL_PASSWORD')  # Use app password for Gmail
        }
        
        # Alert recipients
        self.recipients = {
            'critical': ['admin@company.com', 'oncall@company.com'],
            'warning': ['devops@company.com'],
            'info': ['monitoring@company.com']
        }
    
    def create_incident_email(self, incident_data):
        """Create HTML email for incident alerts"""
        html_template = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                .header {{ background-color: #ff4757; color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; font-family: Arial, sans-serif; }}
                .incident {{ background-color: #fff5f5; border-left: 5px solid #ff4757; padding: 15px; margin: 10px 0; }}
                .warning {{ background-color: #fffbf0; border-left: 5px solid #ffa502; padding: 15px; margin: 10px 0; }}
                .metrics {{ background-color: #f8f9fa; padding: 15px; border-radius: 5px; }}
                .footer {{ color: #666; font-size: 12px; margin-top: 30px; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üö® CRITICAL INCIDENT ALERT</h1>
                <p>AI Log Monitoring System</p>
            </div>
            
            <div class="content">
                <h2>Incident Details</h2>
                <div class="incident">
                    <strong>üïí Time:</strong> {incident_data.get('timestamp', 'N/A')}<br>
                    <strong>üìä Severity:</strong> {incident_data.get('severity', 'HIGH')}<br>
                    <strong>üîç Type:</strong> {incident_data.get('classification', 'Unknown')}<br>
                    <strong>üìù Message:</strong> {incident_data.get('message', 'No message')}<br>
                    <strong>üñ•Ô∏è Source:</strong> {incident_data.get('source', 'Unknown')}
                </div>
                
                <h3>üìà Current System Metrics</h3>
                <div class="metrics">
                    <strong>Total Incidents Today:</strong> {incident_data.get('total_incidents', 0)}<br>
                    <strong>Warnings in Last Hour:</strong> {incident_data.get('recent_warnings', 0)}<br>
                    <strong>System Health:</strong> {incident_data.get('system_health', 'Unknown')}
                </div>
                
                <h3>üîß Recommended Actions</h3>
                <ul>
                    <li>Check service logs immediately</li>
                    <li>Verify system resources (CPU, Memory, Disk)</li>
                    <li>Contact on-call engineer if issue persists</li>
                    <li>Monitor Grafana dashboard for trends</li>
                </ul>
                
                <p><strong>Dashboard:</strong> <a href="http://localhost:3000">Grafana Monitoring</a></p>
            </div>
            
            <div class="footer">
                <p>This alert was generated by AI Log Monitoring System at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
        </body>
        </html>
        """
        return html_template
    
    def create_warning_email(self, warning_data):
        """Create HTML email for warning alerts"""
        html_template = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                .header {{ background-color: #ffa502; color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; font-family: Arial, sans-serif; }}
                .warning {{ background-color: #fffbf0; border-left: 5px solid #ffa502; padding: 15px; margin: 10px 0; }}
                .metrics {{ background-color: #f8f9fa; padding: 15px; border-radius: 5px; }}
                .footer {{ color: #666; font-size: 12px; margin-top: 30px; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>‚ö†Ô∏è WARNING ALERT</h1>
                <p>Preventive Action Recommended</p>
            </div>
            
            <div class="content">
                <h2>Warning Details</h2>
                <div class="warning">
                    <strong>üïí Time:</strong> {warning_data.get('timestamp', 'N/A')}<br>
                    <strong>üìä Type:</strong> {warning_data.get('warning_type', 'General')}<br>
                    <strong>üìù Message:</strong> {warning_data.get('message', 'No message')}<br>
                    <strong>üñ•Ô∏è Source:</strong> {warning_data.get('source', 'Unknown')}<br>
                    <strong>üìà Trend:</strong> {warning_data.get('trend', 'Increasing')}
                </div>
                
                <h3>üìä Warning Statistics</h3>
                <div class="metrics">
                    <strong>Warnings in Last 5 Minutes:</strong> {warning_data.get('count_5min', 0)}<br>
                    <strong>Total Warnings Today:</strong> {warning_data.get('total_warnings', 0)}<br>
                    <strong>Risk Level:</strong> {warning_data.get('risk_level', 'Medium')}
                </div>
                
                <h3>üõ†Ô∏è Preventive Actions</h3>
                <ul>
                    <li>Review system performance metrics</li>
                    <li>Consider scaling resources if needed</li>
                    <li>Monitor for escalation to incidents</li>
                    <li>Update team on potential issues</li>
                </ul>
            </div>
            
            <div class="footer">
                <p>Early warning system - Take action now to prevent incidents</p>
            </div>
        </body>
        </html>
        """
        return html_template
    
    def send_email_alert(self, subject, html_content, alert_type='critical', attachments=None):
        """Send email alert with HTML content"""
        try:
            # Create message
            message = MIMEMultipart("alternative")
            message["Subject"] = subject
            message["From"] = self.smtp_config['username']
            message["To"] = ", ".join(self.recipients[alert_type])
            
            # Create HTML part
            html_part = MIMEText(html_content, "html")
            message.attach(html_part)
            
            # Add attachments if provided
            if attachments:
                for file_path in attachments:
                    if os.path.isfile(file_path):
                        with open(file_path, "rb") as attachment:
                            part = MIMEBase('application', 'octet-stream')
                            part.set_payload(attachment.read())
                        
                        encoders.encode_base64(part)
                        part.add_header(
                            'Content-Disposition',
                            f'attachment; filename= {os.path.basename(file_path)}'
                        )
                        message.attach(part)
            
            # Send email
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_config['smtp_server'], self.smtp_config['port']) as server:
                server.starttls(context=context)
                server.login(self.smtp_config['username'], self.smtp_config['password'])
                server.sendmail(
                    self.smtp_config['username'], 
                    self.recipients[alert_type], 
                    message.as_string()
                )
            
            print(f"‚úÖ Email alert sent successfully to {len(self.recipients[alert_type])} recipients")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to send email alert: {e}")
            return False
    
    def send_incident_alert(self, incident_data):
        """Send critical incident alert"""
        subject = f"üö® CRITICAL: {incident_data.get('message', 'System Alert')} - {datetime.now().strftime('%H:%M:%S')}"
        html_content = self.create_incident_email(incident_data)
        return self.send_email_alert(subject, html_content, 'critical')
    
    def send_warning_alert(self, warning_data):
        """Send warning alert"""
        subject = f"‚ö†Ô∏è WARNING: {warning_data.get('warning_type', 'System Warning')} - Action Recommended"
        html_content = self.create_warning_email(warning_data)
        return self.send_email_alert(subject, html_content, 'warning')

class SlackAlertSystem:
    """Slack integration for alerts"""
    
    def __init__(self, webhook_url=None):
        self.webhook_url = webhook_url or os.getenv('SLACK_WEBHOOK_URL')
    
    def send_slack_alert(self, message, color="danger", channel="#alerts"):
        """Send alert to Slack"""
        try:
            payload = {
                "channel": channel,
                "attachments": [{
                    "color": color,
                    "fields": [{
                        "title": "AI Log Monitor Alert",
                        "value": message,
                        "short": False
                    }],
                    "footer": "AI Log Monitoring System",
                    "ts": int(datetime.now().timestamp())
                }]
            }
            
            response = requests.post(self.webhook_url, json=payload)
            if response.status_code == 200:
                print("‚úÖ Slack alert sent successfully")
                return True
            else:
                print(f"‚ùå Slack alert failed: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Failed to send Slack alert: {e}")
            return False

# Example usage and integration with Grafana
class IntegratedAlertSystem:
    """Combined alert system with multiple channels"""
    
    def __init__(self):
        self.email_alerts = EmailAlertSystem()
        self.slack_alerts = SlackAlertSystem()
    
    def handle_grafana_webhook(self, webhook_data):
        """Process Grafana webhook and send appropriate alerts"""
        try:
            # Parse Grafana webhook data
            alert_state = webhook_data.get('state', 'unknown')
            rule_name = webhook_data.get('ruleName', 'Unknown Rule')
            message = webhook_data.get('message', 'No message')
            
            if alert_state == 'alerting':
                if 'incident' in rule_name.lower() or 'critical' in rule_name.lower():
                    # Send incident alert
                    incident_data = {
                        'timestamp': datetime.now().isoformat(),
                        'severity': 'CRITICAL',
                        'classification': 'Incident',
                        'message': message,
                        'source': 'Grafana Alert',
                        'total_incidents': self.get_incident_count(),
                        'system_health': 'DEGRADED'
                    }
                    self.email_alerts.send_incident_alert(incident_data)
                    self.slack_alerts.send_slack_alert(f"üö® INCIDENT: {message}", "danger")
                
                elif 'warning' in rule_name.lower():
                    # Send warning alert
                    warning_data = {
                        'timestamp': datetime.now().isoformat(),
                        'warning_type': 'High Rate Detected',
                        'message': message,
                        'source': 'Grafana Alert',
                        'count_5min': 5,
                        'risk_level': 'Medium',
                        'trend': 'Increasing'
                    }
                    self.email_alerts.send_warning_alert(warning_data)
                    self.slack_alerts.send_slack_alert(f"‚ö†Ô∏è WARNING: {message}", "warning")
            
            elif alert_state == 'ok':
                # Send recovery notification
                self.slack_alerts.send_slack_alert(f"‚úÖ RESOLVED: {rule_name}", "good")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error handling Grafana webhook: {e}")
            return False
    
    def get_incident_count(self):
        """Get current incident count from VictoriaMetrics"""
        try:
            response = requests.get('http://localhost:8428/api/v1/query?query=log_incident_total')
            data = response.json()
            if data.get('data', {}).get('result'):
                return int(float(data['data']['result'][0]['value'][1]))
            return 0
        except:
            return 0

# Configuration setup example
if __name__ == "__main__":
    # Setup email configuration
    print("üìß Setting up email alerts...")
    
    # You'll need to set these environment variables:
    # export EMAIL_USERNAME="your-email@gmail.com"
    # export EMAIL_PASSWORD="your-app-password"  # Use App Password for Gmail
    # export SLACK_WEBHOOK_URL="https://hooks.slack.com/services/..."
    
    # Test email alert
    alert_system = IntegratedAlertSystem()
    
    # Example incident data
    test_incident = {
        'timestamp': datetime.now().isoformat(),
        'severity': 'CRITICAL',
        'classification': 'Database Connection Failed',
        'message': 'Database connection timeout - multiple retries failed',
        'source': 'production-db-01',
        'total_incidents': 3,
        'recent_warnings': 8,
        'system_health': 'DEGRADED'
    }
    
    print("üö® Sending test incident alert...")
    # alert_system.email_alerts.send_incident_alert(test_incident)
    
    print("‚úÖ Alert system configuration complete!")
    print("\nüìã Next steps:")
    print("1. Set environment variables for email credentials")
    print("2. Configure Grafana webhook URL: http://your-server:5000/webhook")
    print("3. Test email delivery with your SMTP settings")
    print("4. Set up Slack webhook for team notifications")
